app.py
from fastapi import FastAPI
import skin_cancer_router
import uvicorn

	app = FastAPI()
	app.include_router(skin_cancer_router.router, prefix='/skin-cancer-classification') # noqa
	@app.get('/healthcheck', status_code=200) async def healthcheck():
	return 'Skin cancer classifier is all ready to go!' @app.get("/")
async def root():
return {"message": "Hello World"} if __name__ == "__main__":
uvicorn.run(app, host="0.0.0.0", port=8000)

Main.py
import detection
from tkinter.filedialog import askopenfilename from tkinter import Tk
Tk().withdraw()
filename = askopenfilename()
r = detection.skin_lesion_classification(filename) print(r)

Detection.py
from PIL import Image
xxxiii
 import io
import numpy as np import tensorflow as tf
from keras.preprocessing.image import img_to_array from keras.applications import imagenet_utils
from model import Model
def skin_lesion_classification(image_file): model = Model().define_model() model.load_weights('data/models/weights.h5')
image = Image.open(image_file)
if image.mode != 'RGB':
image = image.convert('RGB')
image = image.resize((28, 28))
image = img_to_array(image)/255
image = np.expand_dims(image, axis=0)
image = imagenet_utils.preprocess_input(image)
predicted_class = model.predict_classes(image) 

mapping = {
0: 'Melanocytic nevi (non-cancerous)',
1: 'Melanoma (cancerous)',
2: 'Benign keratosis-like lesions (non-cancerous)', 3: 'Basal cell carcinoma (cancerous)',
4: 'Actinic keratoses (cancerous)',
5: 'Vascular lesions (non-cancerous)',
6: 'Dermatofibroma (non-cancerous)'
}
return {'predicted class': mapping[predicted_class[0]] }
